{"ast":null,"code":"import { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Rectangle.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = canvasSize => {\n  const {\n      height,\n      width\n    } = canvasSize,\n    posOffset = -0.25,\n    sizeFactor = 1.5;\n  return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n  constructor(engine, container) {\n    var _this = this;\n    this._addToPool = function () {\n      for (var _len = arguments.length, particles = new Array(_len), _key = 0; _key < _len; _key++) {\n        particles[_key] = arguments[_key];\n      }\n      for (const particle of particles) {\n        _this._pool.push(particle);\n      }\n    };\n    this._applyDensity = (options, manualCount, group) => {\n      var _options$number$densi;\n      const numberOptions = options.number;\n      if (!((_options$number$densi = options.number.density) !== null && _options$number$densi !== void 0 && _options$number$densi.enable)) {\n        if (group === undefined) {\n          this._limit = numberOptions.limit.value;\n        } else if (numberOptions.limit) {\n          this._groupLimits.set(group, numberOptions.limit.value);\n        }\n        return;\n      }\n      const densityFactor = this._initDensityFactor(numberOptions.density),\n        optParticlesNumber = numberOptions.value,\n        optParticlesLimit = numberOptions.limit.value > 0 ? numberOptions.limit.value : optParticlesNumber,\n        particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n        particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n      if (group === undefined) {\n        this._limit = numberOptions.limit.value * densityFactor;\n      } else {\n        this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n      }\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n    this._initDensityFactor = densityOptions => {\n      const container = this._container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n      const canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.height * densityOptions.width * pxRatio ** 2);\n    };\n    this._pushParticle = (position, overrideOptions, group, initializer) => {\n      try {\n        let particle = this._pool.pop();\n        if (particle) {\n          particle.init(this._nextId, position, overrideOptions, group);\n        } else {\n          particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n        }\n        let canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        this._array.push(particle);\n        this._zArray.push(particle);\n        this._nextId++;\n        this._engine.dispatchEvent(\"particleAdded\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n        return particle;\n      } catch (e) {\n        getLogger().warning(\"\".concat(errorPrefix, \" adding particle: \").concat(e));\n        return;\n      }\n    };\n    this._removeParticle = (index, group, override) => {\n      const particle = this._array[index];\n      if (!particle || particle.group !== group) {\n        return false;\n      }\n      const zIdx = this._zArray.indexOf(particle);\n      this._array.splice(index, 1);\n      this._zArray.splice(zIdx, 1);\n      particle.destroy(override);\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this._container,\n        data: {\n          particle\n        }\n      });\n      this._addToPool(particle);\n      return true;\n    };\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this._pool = [];\n    this._limit = 0;\n    this._groupLimits = new Map();\n    this._needsSort = false;\n    this._lastZIndex = 0;\n    this._interactionManager = new InteractionManager(engine, container);\n    const canvasSize = container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = this._engine.getMovers(container, true);\n    this.updaters = this._engine.getUpdaters(container, true);\n  }\n  get count() {\n    return this._array.length;\n  }\n  addManualParticles() {\n    const container = this._container,\n      options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n    }\n  }\n  addParticle(position, overrideOptions, group, initializer) {\n    var _this$_groupLimits$ge;\n    const limitOptions = this._container.actualOptions.particles.number.limit,\n      limit = group === undefined ? this._limit : (_this$_groupLimits$ge = this._groupLimits.get(group)) !== null && _this$_groupLimits$ge !== void 0 ? _this$_groupLimits$ge : this._limit,\n      currentCount = this.count;\n    if (limit > 0) {\n      if (limitOptions.mode === \"delete\") {\n        const countToRemove = currentCount + 1 - limit;\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      } else if (limitOptions.mode === \"wait\") {\n        if (currentCount >= limit) {\n          return;\n        }\n      }\n    }\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n  clear() {\n    this._array = [];\n    this._zArray = [];\n  }\n  destroy() {\n    this._array = [];\n    this._zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n  async draw(delta) {\n    const container = this._container,\n      canvas = container.canvas;\n    canvas.clear();\n    await this.update(delta);\n    for (const [, plugin] of container.plugins) {\n      canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this._zArray) {\n      p.draw(delta);\n    }\n  }\n  filter(condition) {\n    return this._array.filter(condition);\n  }\n  find(condition) {\n    return this._array.find(condition);\n  }\n  get(index) {\n    return this._array[index];\n  }\n  handleClickMode(mode) {\n    this._interactionManager.handleClickMode(mode);\n  }\n  init() {\n    const container = this._container,\n      options = container.actualOptions;\n    this._lastZIndex = 0;\n    this._needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.getUpdaters(container, true);\n    this._interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this._interactionManager.init();\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n    this.addManualParticles();\n    if (!handled) {\n      const particlesOptions = options.particles,\n        groups = particlesOptions.groups;\n      for (const group in groups) {\n        const groupOptions = groups[group];\n        for (let i = this.count, j = 0; j < ((_groupOptions$number = groupOptions.number) === null || _groupOptions$number === void 0 ? void 0 : _groupOptions$number.value) && i < particlesOptions.number.value; i++, j++) {\n          var _groupOptions$number;\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < particlesOptions.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n  push(nb, mouse, overrideOptions, group) {\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n  }\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  remove(particle, group, override) {\n    this.removeAt(this._array.indexOf(particle), undefined, group, override);\n  }\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n    if (index < 0 || index > this.count) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      this._removeParticle(i--, group, override) && deleted++;\n    }\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  setDensity() {\n    const options = this._container.actualOptions,\n      groups = options.particles.groups;\n    for (const group in groups) {\n      this._applyDensity(groups[group], 0, group);\n    }\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n  setLastZIndex(zIndex) {\n    this._lastZIndex = zIndex;\n    this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n  }\n  setResizeFactor(factor) {\n    this._resizeFactor = factor;\n  }\n  async update(delta) {\n    const container = this._container,\n      particlesToDelete = new Set();\n    this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n    for (const [, plugin] of container.plugins) {\n      plugin.update && (await plugin.update(delta));\n    }\n    const resizeFactor = this._resizeFactor;\n    for (const particle of this._array) {\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      await this._interactionManager.reset(particle);\n      for (const [, plugin] of this._container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        plugin.particleUpdate && plugin.particleUpdate(particle, delta);\n      }\n      for (const mover of this.movers) {\n        mover.isEnabled(particle) && mover.move(particle, delta);\n      }\n      if (particle.destroyed) {\n        particlesToDelete.add(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    if (particlesToDelete.size) {\n      const checkDelete = p => !particlesToDelete.has(p);\n      this._array = this.filter(checkDelete);\n      this._zArray = this._zArray.filter(checkDelete);\n      for (const particle of particlesToDelete) {\n        this._engine.dispatchEvent(\"particleRemoved\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n      }\n      this._addToPool(...particlesToDelete);\n    }\n    await this._interactionManager.externalInteract(delta);\n    for (const particle of this._array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        await this._interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete this._resizeFactor;\n    if (this._needsSort) {\n      const zArray = this._zArray;\n      zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this._lastZIndex = zArray[zArray.length - 1].position.z;\n      this._needsSort = false;\n    }\n  }\n}","map":{"version":3,"names":["getLogger","getPosition","InteractionManager","Particle","Point","QuadTree","Rectangle","errorPrefix","qTreeCapacity","qTreeRectangle","canvasSize","height","width","posOffset","sizeFactor","Particles","constructor","engine","container","_this","_addToPool","_len","arguments","length","particles","Array","_key","particle","_pool","push","_applyDensity","options","manualCount","group","_options$number$densi","numberOptions","number","density","enable","undefined","_limit","limit","value","_groupLimits","set","densityFactor","_initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","Math","min","particlesCount","count","filter","t","abs","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","_pushParticle","position","overrideOptions","initializer","pop","init","_nextId","_engine","canAdd","_array","_zArray","dispatchEvent","data","e","warning","concat","_removeParticle","index","override","zIdx","indexOf","splice","destroy","Map","_needsSort","_lastZIndex","_interactionManager","size","quadTree","movers","getMovers","updaters","getUpdaters","addManualParticles","actualOptions","manualParticles","addParticle","_this$_groupLimits$ge","limitOptions","get","currentCount","mode","countToRemove","clear","draw","delta","update","plugin","plugins","drawPlugin","p","condition","find","handleClickMode","handled","particlesInitialization","pathGenerator","pathGenerators","particlesOptions","groups","groupOptions","i","j","_groupOptions$number","nb","mouse","redraw","factor","remove","removeAt","quantity","deleted","setDensity","setLastZIndex","zIndex","setResizeFactor","_resizeFactor","particlesToDelete","Set","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","add","insert","checkDelete","has","externalInteract","updater","spawning","particlesInteract","zArray","sort","a","b","z","id"],"sources":["C:/Users/84146/OneDrive/Documents/Portfolio/ParamDesai111.github.io/node_modules/@tsparticles/engine/browser/Core/Particles.js"],"sourcesContent":["import { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Rectangle.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    const { height, width } = canvasSize, posOffset = -0.25, sizeFactor = 1.5;\n    return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._addToPool = (...particles) => {\n            for (const particle of particles) {\n                this._pool.push(particle);\n            }\n        };\n        this._applyDensity = (options, manualCount, group) => {\n            const numberOptions = options.number;\n            if (!options.number.density?.enable) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                }\n                else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit.value > 0 ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            }\n            else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** 2);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this._pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, 1);\n            this._zArray.splice(zIdx, 1);\n            particle.destroy(override);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.getMovers(container, true);\n        this.updaters = this._engine.getUpdaters(container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const limitOptions = this._container.actualOptions.particles.number.limit, limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit, currentCount = this.count;\n        if (limit > 0) {\n            if (limitOptions.mode === \"delete\") {\n                const countToRemove = currentCount + 1 - limit;\n                if (countToRemove > 0) {\n                    this.removeQuantity(countToRemove);\n                }\n            }\n            else if (limitOptions.mode === \"wait\") {\n                if (currentCount >= limit) {\n                    return;\n                }\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for (const group in groups) {\n                const groupOptions = groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            this._removeParticle(i--, group, override) && deleted++;\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && (await plugin.update(delta));\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array) {\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                plugin.particleUpdate && plugin.particleUpdate(particle, delta);\n            }\n            for (const mover of this.movers) {\n                mover.isEnabled(particle) && mover.move(particle, delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete) {\n                this._engine.dispatchEvent(\"particleRemoved\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this._lastZIndex = zArray[zArray.length - 1].position.z;\n            this._needsSort = false;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}