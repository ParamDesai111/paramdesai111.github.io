{"ast":null,"code":"import { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Rectangle.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = canvasSize => {\n  const {\n      height,\n      width\n    } = canvasSize,\n    posOffset = -0.25,\n    sizeFactor = 1.5;\n  return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n  constructor(engine, container) {\n    this._addToPool = (...particles) => {\n      for (const particle of particles) {\n        this._pool.push(particle);\n      }\n    };\n    this._applyDensity = (options, manualCount, group) => {\n      const numberOptions = options.number;\n      if (!options.number.density?.enable) {\n        if (group === undefined) {\n          this._limit = numberOptions.limit.value;\n        } else if (numberOptions.limit) {\n          this._groupLimits.set(group, numberOptions.limit.value);\n        }\n        return;\n      }\n      const densityFactor = this._initDensityFactor(numberOptions.density),\n        optParticlesNumber = numberOptions.value,\n        optParticlesLimit = numberOptions.limit.value > 0 ? numberOptions.limit.value : optParticlesNumber,\n        particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n        particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n      if (group === undefined) {\n        this._limit = numberOptions.limit.value * densityFactor;\n      } else {\n        this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n      }\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n    this._initDensityFactor = densityOptions => {\n      const container = this._container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n      const canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.height * densityOptions.width * pxRatio ** 2);\n    };\n    this._pushParticle = (position, overrideOptions, group, initializer) => {\n      try {\n        let particle = this._pool.pop();\n        if (particle) {\n          particle.init(this._nextId, position, overrideOptions, group);\n        } else {\n          particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n        }\n        let canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        this._array.push(particle);\n        this._zArray.push(particle);\n        this._nextId++;\n        this._engine.dispatchEvent(\"particleAdded\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n        return particle;\n      } catch (e) {\n        getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n        return;\n      }\n    };\n    this._removeParticle = (index, group, override) => {\n      const particle = this._array[index];\n      if (!particle || particle.group !== group) {\n        return false;\n      }\n      const zIdx = this._zArray.indexOf(particle);\n      this._array.splice(index, 1);\n      this._zArray.splice(zIdx, 1);\n      particle.destroy(override);\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this._container,\n        data: {\n          particle\n        }\n      });\n      this._addToPool(particle);\n      return true;\n    };\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this._pool = [];\n    this._limit = 0;\n    this._groupLimits = new Map();\n    this._needsSort = false;\n    this._lastZIndex = 0;\n    this._interactionManager = new InteractionManager(engine, container);\n    const canvasSize = container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = this._engine.getMovers(container, true);\n    this.updaters = this._engine.getUpdaters(container, true);\n  }\n  get count() {\n    return this._array.length;\n  }\n  addManualParticles() {\n    const container = this._container,\n      options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n    }\n  }\n  addParticle(position, overrideOptions, group, initializer) {\n    const limitOptions = this._container.actualOptions.particles.number.limit,\n      limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit,\n      currentCount = this.count;\n    if (limit > 0) {\n      if (limitOptions.mode === \"delete\") {\n        const countToRemove = currentCount + 1 - limit;\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      } else if (limitOptions.mode === \"wait\") {\n        if (currentCount >= limit) {\n          return;\n        }\n      }\n    }\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n  clear() {\n    this._array = [];\n    this._zArray = [];\n  }\n  destroy() {\n    this._array = [];\n    this._zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n  async draw(delta) {\n    const container = this._container,\n      canvas = container.canvas;\n    canvas.clear();\n    await this.update(delta);\n    for (const [, plugin] of container.plugins) {\n      canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this._zArray) {\n      p.draw(delta);\n    }\n  }\n  filter(condition) {\n    return this._array.filter(condition);\n  }\n  find(condition) {\n    return this._array.find(condition);\n  }\n  get(index) {\n    return this._array[index];\n  }\n  handleClickMode(mode) {\n    this._interactionManager.handleClickMode(mode);\n  }\n  init() {\n    const container = this._container,\n      options = container.actualOptions;\n    this._lastZIndex = 0;\n    this._needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.getUpdaters(container, true);\n    this._interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this._interactionManager.init();\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n    this.addManualParticles();\n    if (!handled) {\n      const particlesOptions = options.particles,\n        groups = particlesOptions.groups;\n      for (const group in groups) {\n        const groupOptions = groups[group];\n        for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < particlesOptions.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n  push(nb, mouse, overrideOptions, group) {\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse?.position, overrideOptions, group);\n    }\n  }\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  remove(particle, group, override) {\n    this.removeAt(this._array.indexOf(particle), undefined, group, override);\n  }\n  removeAt(index, quantity = 1, group, override) {\n    if (index < 0 || index > this.count) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      this._removeParticle(i--, group, override) && deleted++;\n    }\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  setDensity() {\n    const options = this._container.actualOptions,\n      groups = options.particles.groups;\n    for (const group in groups) {\n      this._applyDensity(groups[group], 0, group);\n    }\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n  setLastZIndex(zIndex) {\n    this._lastZIndex = zIndex;\n    this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n  }\n  setResizeFactor(factor) {\n    this._resizeFactor = factor;\n  }\n  async update(delta) {\n    const container = this._container,\n      particlesToDelete = new Set();\n    this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n    for (const [, plugin] of container.plugins) {\n      plugin.update && (await plugin.update(delta));\n    }\n    const resizeFactor = this._resizeFactor;\n    for (const particle of this._array) {\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      await this._interactionManager.reset(particle);\n      for (const [, plugin] of this._container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        plugin.particleUpdate && plugin.particleUpdate(particle, delta);\n      }\n      for (const mover of this.movers) {\n        mover.isEnabled(particle) && mover.move(particle, delta);\n      }\n      if (particle.destroyed) {\n        particlesToDelete.add(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    if (particlesToDelete.size) {\n      const checkDelete = p => !particlesToDelete.has(p);\n      this._array = this.filter(checkDelete);\n      this._zArray = this._zArray.filter(checkDelete);\n      for (const particle of particlesToDelete) {\n        this._engine.dispatchEvent(\"particleRemoved\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n      }\n      this._addToPool(...particlesToDelete);\n    }\n    await this._interactionManager.externalInteract(delta);\n    for (const particle of this._array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        await this._interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete this._resizeFactor;\n    if (this._needsSort) {\n      const zArray = this._zArray;\n      zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this._lastZIndex = zArray[zArray.length - 1].position.z;\n      this._needsSort = false;\n    }\n  }\n}","map":{"version":3,"names":["getLogger","getPosition","InteractionManager","Particle","Point","QuadTree","Rectangle","errorPrefix","qTreeCapacity","qTreeRectangle","canvasSize","height","width","posOffset","sizeFactor","Particles","constructor","engine","container","_addToPool","particles","particle","_pool","push","_applyDensity","options","manualCount","group","numberOptions","number","density","enable","undefined","_limit","limit","value","_groupLimits","set","densityFactor","_initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","Math","min","particlesCount","count","filter","t","length","abs","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","_pushParticle","position","overrideOptions","initializer","pop","init","_nextId","_engine","canAdd","_array","_zArray","dispatchEvent","data","e","warning","_removeParticle","index","override","zIdx","indexOf","splice","destroy","Map","_needsSort","_lastZIndex","_interactionManager","size","quadTree","movers","getMovers","updaters","getUpdaters","addManualParticles","actualOptions","manualParticles","addParticle","limitOptions","get","currentCount","mode","countToRemove","clear","draw","delta","update","plugin","plugins","drawPlugin","p","condition","find","handleClickMode","handled","particlesInitialization","pathGenerator","pathGenerators","particlesOptions","groups","groupOptions","i","j","nb","mouse","redraw","factor","remove","removeAt","quantity","deleted","setDensity","setLastZIndex","zIndex","setResizeFactor","_resizeFactor","particlesToDelete","Set","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","add","insert","checkDelete","has","externalInteract","updater","spawning","particlesInteract","zArray","sort","a","b","z","id"],"sources":["C:/Users/84146/OneDrive/Documents/Portfolio/ParamDesai111.github.io/node_modules/@tsparticles/engine/browser/Core/Particles.js"],"sourcesContent":["import { getLogger, getPosition } from \"../Utils/Utils.js\";\nimport { InteractionManager } from \"./Utils/InteractionManager.js\";\nimport { Particle } from \"./Particle.js\";\nimport { Point } from \"./Utils/Point.js\";\nimport { QuadTree } from \"./Utils/QuadTree.js\";\nimport { Rectangle } from \"./Utils/Rectangle.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    const { height, width } = canvasSize, posOffset = -0.25, sizeFactor = 1.5;\n    return new Rectangle(posOffset * width, posOffset * height, sizeFactor * width, sizeFactor * height);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._addToPool = (...particles) => {\n            for (const particle of particles) {\n                this._pool.push(particle);\n            }\n        };\n        this._applyDensity = (options, manualCount, group) => {\n            const numberOptions = options.number;\n            if (!options.number.density?.enable) {\n                if (group === undefined) {\n                    this._limit = numberOptions.limit.value;\n                }\n                else if (numberOptions.limit) {\n                    this._groupLimits.set(group, numberOptions.limit.value);\n                }\n                return;\n            }\n            const densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit.value > 0 ? numberOptions.limit.value : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            if (group === undefined) {\n                this._limit = numberOptions.limit.value * densityFactor;\n            }\n            else {\n                this._groupLimits.set(group, numberOptions.limit.value * densityFactor);\n            }\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.height * densityOptions.width * pxRatio ** 2);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this._pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, 1);\n            this._zArray.splice(zIdx, 1);\n            particle.destroy(override);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            this._addToPool(particle);\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this._pool = [];\n        this._limit = 0;\n        this._groupLimits = new Map();\n        this._needsSort = false;\n        this._lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.getMovers(container, true);\n        this.updaters = this._engine.getUpdaters(container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const limitOptions = this._container.actualOptions.particles.number.limit, limit = group === undefined ? this._limit : this._groupLimits.get(group) ?? this._limit, currentCount = this.count;\n        if (limit > 0) {\n            if (limitOptions.mode === \"delete\") {\n                const countToRemove = currentCount + 1 - limit;\n                if (countToRemove > 0) {\n                    this.removeQuantity(countToRemove);\n                }\n            }\n            else if (limitOptions.mode === \"wait\") {\n                if (currentCount >= limit) {\n                    return;\n                }\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container, canvas = container.canvas;\n        canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    get(index) {\n        return this._array[index];\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this._lastZIndex = 0;\n        this._needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            const particlesOptions = options.particles, groups = particlesOptions.groups;\n            for (const group in groups) {\n                const groupOptions = groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < particlesOptions.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < particlesOptions.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            this._removeParticle(i--, group, override) && deleted++;\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    setLastZIndex(zIndex) {\n        this._lastZIndex = zIndex;\n        this._needsSort = this._needsSort || this._lastZIndex < zIndex;\n    }\n    setResizeFactor(factor) {\n        this._resizeFactor = factor;\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && (await plugin.update(delta));\n        }\n        const resizeFactor = this._resizeFactor;\n        for (const particle of this._array) {\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                plugin.particleUpdate && plugin.particleUpdate(particle, delta);\n            }\n            for (const mover of this.movers) {\n                mover.isEnabled(particle) && mover.move(particle, delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            for (const particle of particlesToDelete) {\n                this._engine.dispatchEvent(\"particleRemoved\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n            }\n            this._addToPool(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete this._resizeFactor;\n        if (this._needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this._lastZIndex = zArray[zArray.length - 1].position.z;\n            this._needsSort = false;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}