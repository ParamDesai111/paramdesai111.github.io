{"ast":null,"code":"import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nfunction setParticlesOptionsColor(particlesOptions, color) {\n  if (particlesOptions.color) {\n    particlesOptions.color.value = color;\n  } else {\n    particlesOptions.color = {\n      value: color\n    };\n  }\n}\nexport class EmitterInstance {\n  constructor(engine, emitters, container, options, position) {\n    var _this$options$life$de, _this$_initialPositio, _particlesOptions, _particlesOptions2, _particlesOptions2$mo, _particlesOptions$mov, _particlesOptions$mov2, _this$options$life$co, _this$_engine$emitter;\n    this.emitters = emitters;\n    this.container = container;\n    this._destroy = () => {\n      var _this$_mutationObserv, _this$_resizeObserver;\n      (_this$_mutationObserv = this._mutationObserver) === null || _this$_mutationObserv === void 0 || _this$_mutationObserv.disconnect();\n      this._mutationObserver = undefined;\n      (_this$_resizeObserver = this._resizeObserver) === null || _this$_resizeObserver === void 0 || _this$_resizeObserver.disconnect();\n      this._resizeObserver = undefined;\n      this.emitters.removeEmitter(this);\n      this._engine.dispatchEvent(\"emitterDestroyed\", {\n        container: this.container,\n        data: {\n          emitter: this\n        }\n      });\n    };\n    this._prepareToDie = () => {\n      var _this$options$life;\n      if (this._paused) {\n        return;\n      }\n      const duration = ((_this$options$life = this.options.life) === null || _this$options$life === void 0 ? void 0 : _this$options$life.duration) !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n      if (this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal) && duration !== undefined && duration > 0) {\n        this._duration = duration * 1000;\n      }\n    };\n    this._setColorAnimation = (animation, initValue, maxValue) => {\n      var _animation$speed;\n      const container = this.container;\n      if (!animation.enable) {\n        return initValue;\n      }\n      const colorOffset = randomInRange(animation.offset),\n        delay = getRangeValue(this.options.rate.delay),\n        emitFactor = 1000 * delay / container.retina.reduceFactor,\n        colorSpeed = getRangeValue((_animation$speed = animation.speed) !== null && _animation$speed !== void 0 ? _animation$speed : 0);\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n    };\n    this._engine = engine;\n    this._currentDuration = 0;\n    this._currentEmitDelay = 0;\n    this._currentSpawnDelay = 0;\n    this._initialPosition = position;\n    if (options instanceof Emitter) {\n      this.options = options;\n    } else {\n      this.options = new Emitter();\n      this.options.load(options);\n    }\n    this._spawnDelay = getRangeValue((_this$options$life$de = this.options.life.delay) !== null && _this$options$life$de !== void 0 ? _this$options$life$de : 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = (_this$_initialPositio = this._initialPosition) !== null && _this$_initialPositio !== void 0 ? _this$_initialPositio : this._calcPosition();\n    this.name = this.options.name;\n    this.fill = this.options.fill;\n    this._firstSpawn = !this.options.life.wait;\n    this._startParticlesAdded = false;\n    let particlesOptions = deepExtend({}, this.options.particles);\n    (_particlesOptions = particlesOptions) !== null && _particlesOptions !== void 0 ? _particlesOptions : particlesOptions = {};\n    (_particlesOptions2$mo = (_particlesOptions2 = particlesOptions).move) !== null && _particlesOptions2$mo !== void 0 ? _particlesOptions2$mo : _particlesOptions2.move = {};\n    (_particlesOptions$mov2 = (_particlesOptions$mov = particlesOptions.move).direction) !== null && _particlesOptions$mov2 !== void 0 ? _particlesOptions$mov2 : _particlesOptions$mov.direction = this.options.direction;\n    if (this.options.spawnColor) {\n      this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n    }\n    this._paused = !this.options.autoPlay;\n    this._particlesOptions = particlesOptions;\n    this._size = this._calcSize();\n    this.size = getSize(this._size, this.container.canvas.size);\n    this._lifeCount = (_this$options$life$co = this.options.life.count) !== null && _this$options$life$co !== void 0 ? _this$options$life$co : -1;\n    this._immortal = this._lifeCount <= 0;\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        this._mutationObserver = new MutationObserver(() => {\n          this.resize();\n        });\n        this._resizeObserver = new ResizeObserver(() => {\n          this.resize();\n        });\n        this._mutationObserver.observe(element, {\n          attributes: true,\n          attributeFilter: [\"style\", \"width\", \"height\"]\n        });\n        this._resizeObserver.observe(element);\n      }\n    }\n    const shapeOptions = this.options.shape,\n      shapeGenerator = (_this$_engine$emitter = this._engine.emitterShapeManager) === null || _this$_engine$emitter === void 0 ? void 0 : _this$_engine$emitter.getShapeGenerator(shapeOptions.type);\n    if (shapeGenerator) {\n      this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n    }\n    this._engine.dispatchEvent(\"emitterCreated\", {\n      container,\n      data: {\n        emitter: this\n      }\n    });\n    this.play();\n  }\n  externalPause() {\n    this._paused = true;\n    this.pause();\n  }\n  externalPlay() {\n    this._paused = false;\n    this.play();\n  }\n  async init() {\n    var _this$_shape;\n    await ((_this$_shape = this._shape) === null || _this$_shape === void 0 ? void 0 : _this$_shape.init());\n  }\n  pause() {\n    if (this._paused) {\n      return;\n    }\n    delete this._emitDelay;\n  }\n  play() {\n    var _this$_spawnDelay;\n    if (this._paused) {\n      return;\n    }\n    if (!(this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= ((_this$_spawnDelay = this._spawnDelay) !== null && _this$_spawnDelay !== void 0 ? _this$_spawnDelay : 0)))) {\n      return;\n    }\n    if (this._emitDelay === undefined) {\n      const delay = getRangeValue(this.options.rate.delay);\n      this._emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n    }\n    if (this._lifeCount > 0 || this._immortal) {\n      this._prepareToDie();\n    }\n  }\n  resize() {\n    var _this$_shape2;\n    const initialPosition = this._initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n    this._size = this._calcSize();\n    this.size = getSize(this._size, this.container.canvas.size);\n    (_this$_shape2 = this._shape) === null || _this$_shape2 === void 0 || _this$_shape2.resize(this.position, this.size);\n  }\n  async update(delta) {\n    if (this._paused) {\n      return;\n    }\n    if (this._firstSpawn) {\n      var _this$_spawnDelay2, _this$_emitDelay;\n      this._firstSpawn = false;\n      this._currentSpawnDelay = (_this$_spawnDelay2 = this._spawnDelay) !== null && _this$_spawnDelay2 !== void 0 ? _this$_spawnDelay2 : 0;\n      this._currentEmitDelay = (_this$_emitDelay = this._emitDelay) !== null && _this$_emitDelay !== void 0 ? _this$_emitDelay : 0;\n    }\n    if (!this._startParticlesAdded) {\n      this._startParticlesAdded = true;\n      await this._emitParticles(this.options.startCount);\n    }\n    if (this._duration !== undefined) {\n      this._currentDuration += delta.value;\n      if (this._currentDuration >= this._duration) {\n        this.pause();\n        if (this._spawnDelay !== undefined) {\n          delete this._spawnDelay;\n        }\n        if (!this._immortal) {\n          this._lifeCount--;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n          var _this$_shape3, _this$options$life$de2;\n          this.position = this._calcPosition();\n          (_this$_shape3 = this._shape) === null || _this$_shape3 === void 0 || _this$_shape3.resize(this.position, this.size);\n          this._spawnDelay = getRangeValue((_this$options$life$de2 = this.options.life.delay) !== null && _this$options$life$de2 !== void 0 ? _this$options$life$de2 : 0) * 1000 / this.container.retina.reduceFactor;\n        } else {\n          this._destroy();\n        }\n        this._currentDuration -= this._duration;\n        delete this._duration;\n      }\n    }\n    if (this._spawnDelay !== undefined) {\n      this._currentSpawnDelay += delta.value;\n      if (this._currentSpawnDelay >= this._spawnDelay) {\n        this._engine.dispatchEvent(\"emitterPlay\", {\n          container: this.container\n        });\n        this.play();\n        this._currentSpawnDelay -= this._currentSpawnDelay;\n        delete this._spawnDelay;\n      }\n    }\n    if (this._emitDelay !== undefined) {\n      this._currentEmitDelay += delta.value;\n      if (this._currentEmitDelay >= this._emitDelay) {\n        this._emit();\n        this._currentEmitDelay -= this._emitDelay;\n      }\n    }\n  }\n  _calcPosition() {\n    if (this.options.domId) {\n      const container = this.container,\n        element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n          y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio\n        };\n      }\n    }\n    return calcPositionOrRandomFromSizeRanged({\n      size: this.container.canvas.size,\n      position: this.options.position\n    });\n  }\n  _calcSize() {\n    var _this$options$size;\n    const container = this.container;\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          width: elRect.width * container.retina.pixelRatio,\n          height: elRect.height * container.retina.pixelRatio,\n          mode: \"precise\"\n        };\n      }\n    }\n    return (_this$options$size = this.options.size) !== null && _this$options$size !== void 0 ? _this$options$size : (() => {\n      const size = new EmitterSize();\n      size.load({\n        height: 0,\n        mode: \"percent\",\n        width: 0\n      });\n      return size;\n    })();\n  }\n  async _emit() {\n    if (this._paused) {\n      return;\n    }\n    const quantity = getRangeValue(this.options.rate.quantity);\n    await this._emitParticles(quantity);\n  }\n  async _emitParticles(quantity) {\n    const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n    for (let i = 0; i < quantity; i++) {\n      const particlesOptions = deepExtend({}, singleParticlesOptions);\n      if (this.spawnColor) {\n        var _this$options$spawnCo;\n        const hslAnimation = (_this$options$spawnCo = this.options.spawnColor) === null || _this$options$spawnCo === void 0 ? void 0 : _this$options$spawnCo.animation;\n        if (hslAnimation) {\n          this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n          this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n          this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n        }\n        setParticlesOptionsColor(particlesOptions, this.spawnColor);\n      }\n      const shapeOptions = this.options.shape;\n      let position = this.position;\n      if (this._shape) {\n        const shapePosData = await this._shape.randomPosition();\n        if (shapePosData) {\n          position = shapePosData.position;\n          const replaceData = shapeOptions.replace;\n          if (replaceData.color && shapePosData.color) {\n            setParticlesOptionsColor(particlesOptions, shapePosData.color);\n          }\n          if (replaceData.opacity) {\n            if (particlesOptions.opacity) {\n              particlesOptions.opacity.value = shapePosData.opacity;\n            } else {\n              particlesOptions.opacity = {\n                value: shapePosData.opacity\n              };\n            }\n          }\n        } else {\n          position = null;\n        }\n      }\n      if (position) {\n        this.container.particles.addParticle(position, particlesOptions);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSizeRanged","deepExtend","getRangeValue","getSize","isPointInside","itemFromSingleOrMultiple","randomInRange","rangeColorToHsl","Emitter","EmitterSize","setParticlesOptionsColor","particlesOptions","color","value","EmitterInstance","constructor","engine","emitters","container","options","position","_this$options$life$de","_this$_initialPositio","_particlesOptions","_particlesOptions2","_particlesOptions2$mo","_particlesOptions$mov","_particlesOptions$mov2","_this$options$life$co","_this$_engine$emitter","_destroy","_this$_mutationObserv","_this$_resizeObserver","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_this$options$life","_paused","duration","life","retina","reduceFactor","_lifeCount","_immortal","_duration","_setColorAnimation","animation","initValue","maxValue","_animation$speed","enable","colorOffset","offset","delay","rate","emitFactor","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","particles","move","direction","spawnColor","autoPlay","_size","_calcSize","size","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","externalPause","pause","externalPlay","init","_this$_shape","_emitDelay","_this$_spawnDelay","_this$_shape2","initialPosition","origin","update","delta","_this$_spawnDelay2","_this$_emitDelay","_emitParticles","startCount","_this$_shape3","_this$options$life$de2","_emit","elRect","getBoundingClientRect","x","width","pixelRatio","y","height","_this$options$size","mode","quantity","singleParticlesOptions","i","_this$options$spawnCo","hslAnimation","h","s","l","shapePosData","randomPosition","replaceData","replace","opacity","addParticle"],"sources":["C:/Users/84146/OneDrive/Documents/Portfolio/ParamDesai111.github.io/node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    async update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            await this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: \"precise\",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    async _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        await this._emitParticles(quantity);\n    }\n    async _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = await this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}