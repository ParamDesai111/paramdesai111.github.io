{"ast":null,"code":"import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { Vector } from \"./Utils/Vector.js\";\nimport { Vector3d } from \"./Utils/Vector3d.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n  const effectData = effectOptions.options[effect];\n  if (!effectData) {\n    return;\n  }\n  return deepExtend({\n    close: effectOptions.close,\n    fill: effectOptions.fill\n  }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n  const shapeData = shapeOptions.options[shape];\n  if (!shapeData) {\n    return;\n  }\n  return deepExtend({\n    close: shapeOptions.close,\n    fill: shapeOptions.fill\n  }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  const diameter = data.radius * 2;\n  if (data.coord > data.maxCoord - diameter) {\n    data.setCb(-data.radius);\n  } else if (data.coord < diameter) {\n    data.setCb(data.radius);\n  }\n}\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _this = this;\n    this.container = container;\n    this._calcPosition = function (container, position, zIndex) {\n      var _outModes$left, _outModes$right, _outModes$top, _outModes$bottom;\n      let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      for (const [, plugin] of container.plugins) {\n        const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, _this) : undefined;\n        if (pluginPos) {\n          return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n        }\n      }\n      const canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = _this.getRadius(),\n        outModes = _this.options.move.outModes,\n        fixHorizontal = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [\"bounce\", \"bounce-horizontal\"],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: value => pos.x += value,\n            radius\n          });\n        },\n        fixVertical = outMode => {\n          fixOutMode({\n            outMode,\n            checkModes: [\"bounce\", \"bounce-vertical\"],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: value => pos.y += value,\n            radius\n          });\n        };\n      fixHorizontal((_outModes$left = outModes.left) !== null && _outModes$left !== void 0 ? _outModes$left : outModes.default);\n      fixHorizontal((_outModes$right = outModes.right) !== null && _outModes$right !== void 0 ? _outModes$right : outModes.default);\n      fixVertical((_outModes$top = outModes.top) !== null && _outModes$top !== void 0 ? _outModes$top : outModes.default);\n      fixVertical((_outModes$bottom = outModes.bottom) !== null && _outModes$bottom !== void 0 ? _outModes$bottom : outModes.default);\n      if (_this._checkOverlap(pos, tryCount)) {\n        return _this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n      return pos;\n    };\n    this._calculateVelocity = () => {\n      const baseVelocity = getParticleBaseVelocity(this.direction),\n        res = baseVelocity.copy(),\n        moveOptions = this.options.move;\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n      const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n        radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n        range = {\n          left: radOffset - rad * 0.5,\n          right: radOffset + rad * 0.5\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    };\n    this._checkOverlap = function (pos) {\n      let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const collisionsOptions = _this.options.collisions,\n        radius = _this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      const overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      const retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"\".concat(errorPrefix, \" particle is overlapping and can't be placed\"));\n      }\n      return !!_this.container.particles.find(particle => getDistance(pos, particle.position) < radius + particle.getRadius());\n    };\n    this._getRollColor = color => {\n      var _this$roll$angle;\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n      const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n        backSum = this.roll.horizontal ? Math.PI * 0.5 : 0,\n        rolled = Math.floor((((_this$roll$angle = this.roll.angle) !== null && _this$roll$angle !== void 0 ? _this$roll$angle : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (!rolled) {\n        return color;\n      }\n      if (this.backColor) {\n        return this.backColor;\n      }\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n      return color;\n    };\n    this._initPosition = position => {\n      var _this$options$move$ce, _this$options$move$ce2;\n      const container = this.container,\n        zIndexValue = getRangeValue(this.options.zIndex.value);\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      this.initialPosition = this.position.copy();\n      const canvasSize = container.canvas.size;\n      this.moveCenter = {\n        ...getPosition(this.options.move.center, canvasSize),\n        radius: (_this$options$move$ce = this.options.move.center.radius) !== null && _this$options$move$ce !== void 0 ? _this$options$move$ce : 0,\n        mode: (_this$options$move$ce2 = this.options.move.center.mode) !== null && _this$options$move$ce2 !== void 0 ? _this$options$move$ce2 : \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n      this.offset = Vector.origin;\n    };\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n  destroy(override) {\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    const container = this.container,\n      pathGenerator = this.pathGenerator,\n      shapeDrawer = container.shapeDrawers.get(this.shape);\n    shapeDrawer && shapeDrawer.particleDestroy && shapeDrawer.particleDestroy(this);\n    for (const [, plugin] of container.plugins) {\n      plugin.particleDestroyed && plugin.particleDestroyed(this, override);\n    }\n    for (const updater of container.particles.updaters) {\n      updater.particleDestroyed && updater.particleDestroyed(this, override);\n    }\n    pathGenerator && pathGenerator.reset(this);\n    this._engine.dispatchEvent(\"particleDestroyed\", {\n      container: this.container,\n      data: {\n        particle: this\n      }\n    });\n  }\n  draw(delta) {\n    const container = this.container,\n      canvas = container.canvas;\n    for (const [, plugin] of container.plugins) {\n      canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    var _this$bubble$color;\n    return this._getRollColor((_this$bubble$color = this.bubble.color) !== null && _this$bubble$color !== void 0 ? _this$bubble$color : getHslFromAnimation(this.color));\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI * 0.5;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _this$bubble$radius;\n    return (_this$bubble$radius = this.bubble.radius) !== null && _this$bubble$radius !== void 0 ? _this$bubble$radius : this.size.value;\n  }\n  getStrokeColor() {\n    var _this$bubble$color2;\n    return this._getRollColor((_this$bubble$color2 = this.bubble.color) !== null && _this$bubble$color2 !== void 0 ? _this$bubble$color2 : getHslFromAnimation(this.strokeColor));\n  }\n  init(id, position, overrideOptions, group) {\n    var _effectData$fill, _effectData$close, _shapeData$fill, _shapeData$close, _shapeDrawer;\n    const container = this.container,\n      engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.effectClose = true;\n    this.effectFill = true;\n    this.shapeClose = true;\n    this.shapeFill = true;\n    this.pathRotation = false;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      effectType = particlesOptions.effect.type,\n      shapeType = particlesOptions.shape.type,\n      {\n        reduceDuplicates\n      } = particlesOptions;\n    this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const effectOptions = particlesOptions.effect,\n      shapeOptions = particlesOptions.shape;\n    if (overrideOptions) {\n      if (overrideOptions.effect && overrideOptions.effect.type) {\n        const overrideEffectType = overrideOptions.effect.type,\n          effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n        if (effect) {\n          this.effect = effect;\n          effectOptions.load(overrideOptions.effect);\n        }\n      }\n      if (overrideOptions.shape && overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n    }\n    this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n    this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    const effectData = this.effectData;\n    if (effectData) {\n      particlesOptions.load(effectData.particles);\n    }\n    const shapeData = this.shapeData;\n    if (shapeData) {\n      particlesOptions.load(shapeData.particles);\n    }\n    const interactivity = new Interactivity(engine, container);\n    interactivity.load(container.actualOptions.interactivity);\n    interactivity.load(particlesOptions.interactivity);\n    this.interactivity = interactivity;\n    this.effectFill = (_effectData$fill = effectData === null || effectData === void 0 ? void 0 : effectData.fill) !== null && _effectData$fill !== void 0 ? _effectData$fill : particlesOptions.effect.fill;\n    this.effectClose = (_effectData$close = effectData === null || effectData === void 0 ? void 0 : effectData.close) !== null && _effectData$close !== void 0 ? _effectData$close : particlesOptions.effect.close;\n    this.shapeFill = (_shapeData$fill = shapeData === null || shapeData === void 0 ? void 0 : shapeData.fill) !== null && _shapeData$fill !== void 0 ? _shapeData$fill : particlesOptions.shape.fill;\n    this.shapeClose = (_shapeData$close = shapeData === null || shapeData === void 0 ? void 0 : shapeData.close) !== null && _shapeData$close !== void 0 ? _shapeData$close : particlesOptions.shape.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getRangeValue(pathOptions.delay.value) * 1000;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    container.retina.initParticle(this);\n    this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this._initPosition(position);\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    const particles = container.particles;\n    particles.setLastZIndex(this.position.z);\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let effectDrawer = container.effectDrawers.get(this.effect);\n    if (!effectDrawer) {\n      effectDrawer = this._engine.getEffectDrawer(this.effect);\n      if (effectDrawer) {\n        container.effectDrawers.set(this.effect, effectDrawer);\n      }\n    }\n    if (effectDrawer && effectDrawer.loadEffect) {\n      effectDrawer.loadEffect(this);\n    }\n    let shapeDrawer = container.shapeDrawers.get(this.shape);\n    if (!shapeDrawer) {\n      shapeDrawer = this._engine.getShapeDrawer(this.shape);\n      if (shapeDrawer) {\n        container.shapeDrawers.set(this.shape, shapeDrawer);\n      }\n    }\n    if (shapeDrawer && shapeDrawer.loadShape) {\n      shapeDrawer.loadShape(this);\n    }\n    const sideCountFunc = (_shapeDrawer = shapeDrawer) === null || _shapeDrawer === void 0 ? void 0 : _shapeDrawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n    for (const updater of particles.updaters) {\n      updater.init(this);\n    }\n    for (const mover of particles.movers) {\n      mover.init && mover.init(this);\n    }\n    if (effectDrawer && effectDrawer.particleInit) {\n      effectDrawer.particleInit(container, this);\n    }\n    if (shapeDrawer && shapeDrawer.particleInit) {\n      shapeDrawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      plugin.particleCreated && plugin.particleCreated(this);\n    }\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size,\n      position = this.position;\n    return position.x >= -radius && position.y >= -radius && position.y <= canvasSize.height + radius && position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    for (const updater of this.container.particles.updaters) {\n      updater.reset && updater.reset(this);\n    }\n  }\n}","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeValue","randomInRange","setRangeValue","deepExtend","getPosition","initParticleNumericAnimationValue","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","errorPrefix","loadParticlesOptions","loadEffectData","effect","effectOptions","id","reduceDuplicates","effectData","options","close","fill","loadShapeData","shape","shapeOptions","shapeData","fixOutMode","data","outMode","checkModes","diameter","radius","coord","maxCoord","setCb","Particle","constructor","engine","container","position","overrideOptions","group","_this","_calcPosition","zIndex","_outModes$left","_outModes$right","_outModes$top","_outModes$bottom","tryCount","arguments","length","undefined","plugin","plugins","pluginPos","particlePosition","create","x","y","canvasSize","canvas","size","exactPosition","pos","getRadius","outModes","move","fixHorizontal","width","value","fixVertical","height","left","default","right","top","bottom","_checkOverlap","_calculateVelocity","baseVelocity","direction","res","copy","moveOptions","rad","Math","PI","angle","radOffset","offset","range","straight","random","speed","collisionsOptions","collisions","enable","overlapOptions","overlap","retries","Error","concat","particles","find","particle","_getRollColor","color","_this$roll$angle","roll","backColor","alter","backFactor","horizontal","vertical","backSum","rolled","floor","type","_initPosition","_this$options$move$ce","_this$options$move$ce2","zIndexValue","zLayers","initialPosition","moveCenter","center","mode","outType","origin","_engine","init","destroy","override","unbreakable","destroyed","bubble","inRange","slow","pathGenerator","shapeDrawer","shapeDrawers","get","particleDestroy","particleDestroyed","updater","updaters","reset","dispatchEvent","draw","delta","drawParticlePlugin","drawParticle","getFillColor","_this$bubble$color","getMass","z","_this$bubble$radius","getStrokeColor","_this$bubble$color2","strokeColor","_effectData$fill","_effectData$close","_shapeData$fill","_shapeData$close","_shapeDrawer","effectClose","effectFill","shapeClose","shapeFill","pathRotation","lastPathTime","rotation","misplaced","retina","maxDistance","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","effectType","shapeType","overrideEffectType","load","overrideShapeType","interactivity","pathOptions","path","pathDelay","delay","generator","getPathGenerator","addPath","initParticle","factor","initialVelocity","velocity","moveDecay","decay","setLastZIndex","zIndexFactor","sides","effectDrawer","effectDrawers","getEffectDrawer","set","loadEffect","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","particleInit","particleCreated","isInsideCanvas","isVisible"],"sources":["C:/Users/84146/OneDrive/Documents/Portfolio/ParamDesai111.github.io/node_modules/@tsparticles/engine/browser/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils.js\";\nimport { deepExtend, getPosition, initParticleNumericAnimationValue, isInArray, itemFromSingleOrMultiple, } from \"../Utils/Utils.js\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity.js\";\nimport { Vector } from \"./Utils/Vector.js\";\nimport { Vector3d } from \"./Utils/Vector3d.js\";\nimport { alterHsl } from \"../Utils/CanvasUtils.js\";\nimport { errorPrefix } from \"./Utils/Constants.js\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils.js\";\nfunction loadEffectData(effect, effectOptions, id, reduceDuplicates) {\n    const effectData = effectOptions.options[effect];\n    if (!effectData) {\n        return;\n    }\n    return deepExtend({\n        close: effectOptions.close,\n        fill: effectOptions.fill,\n    }, itemFromSingleOrMultiple(effectData, id, reduceDuplicates));\n}\nfunction loadShapeData(shape, shapeOptions, id, reduceDuplicates) {\n    const shapeData = shapeOptions.options[shape];\n    if (!shapeData) {\n        return;\n    }\n    return deepExtend({\n        close: shapeOptions.close,\n        fill: shapeOptions.fill,\n    }, itemFromSingleOrMultiple(shapeData, id, reduceDuplicates));\n}\nfunction fixOutMode(data) {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    const diameter = data.radius * 2;\n    if (data.coord > data.maxCoord - diameter) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < diameter) {\n        data.setCb(data.radius);\n    }\n}\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._calcPosition = (container, position, zIndex, tryCount = 0) => {\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos) {\n                    return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n            }\n            const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position,\n            }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\", \"bounce-horizontal\"],\n                    coord: pos.x,\n                    maxCoord: container.canvas.size.width,\n                    setCb: (value) => (pos.x += value),\n                    radius,\n                });\n            }, fixVertical = (outMode) => {\n                fixOutMode({\n                    outMode,\n                    checkModes: [\"bounce\", \"bounce-vertical\"],\n                    coord: pos.y,\n                    maxCoord: container.canvas.size.height,\n                    setCb: (value) => (pos.y += value),\n                    radius,\n                });\n            };\n            fixHorizontal(outModes.left ?? outModes.default);\n            fixHorizontal(outModes.right ?? outModes.default);\n            fixVertical(outModes.top ?? outModes.default);\n            fixVertical(outModes.bottom ?? outModes.default);\n            if (this._checkOverlap(pos, tryCount)) {\n                return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n            }\n            return pos;\n        };\n        this._calculateVelocity = () => {\n            const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n                return res;\n            }\n            const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n                left: radOffset - rad * 0.5,\n                right: radOffset + rad * 0.5,\n            };\n            if (!moveOptions.straight) {\n                res.angle += randomInRange(setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n                res.length *= getRandom();\n            }\n            return res;\n        };\n        this._checkOverlap = (pos, tryCount = 0) => {\n            const collisionsOptions = this.options.collisions, radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n                return false;\n            }\n            const overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n                return false;\n            }\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(`${errorPrefix} particle is overlapping and can't be placed`);\n            }\n            return !!this.container.particles.find((particle) => getDistance(pos, particle.position) < radius + particle.getRadius());\n        };\n        this._getRollColor = (color) => {\n            if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n                return color;\n            }\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI * 0.5 : 0, rolled = Math.floor(((this.roll.angle ?? 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (!rolled) {\n                return color;\n            }\n            if (this.backColor) {\n                return this.backColor;\n            }\n            if (this.roll.alter) {\n                return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n        };\n        this._initPosition = (position) => {\n            const container = this.container, zIndexValue = getRangeValue(this.options.zIndex.value);\n            this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n            this.initialPosition = this.position.copy();\n            const canvasSize = container.canvas.size;\n            this.moveCenter = {\n                ...getPosition(this.options.move.center, canvasSize),\n                radius: this.options.move.center.radius ?? 0,\n                mode: this.options.move.center.mode ?? \"percent\",\n            };\n            this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n                case \"inside\":\n                    this.outType = \"inside\";\n                    break;\n                case \"outside\":\n                    this.outType = \"outside\";\n                    break;\n            }\n            this.offset = Vector.origin;\n        };\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        const container = this.container, pathGenerator = this.pathGenerator, shapeDrawer = container.shapeDrawers.get(this.shape);\n        shapeDrawer && shapeDrawer.particleDestroy && shapeDrawer.particleDestroy(this);\n        for (const [, plugin] of container.plugins) {\n            plugin.particleDestroyed && plugin.particleDestroyed(this, override);\n        }\n        for (const updater of container.particles.updaters) {\n            updater.particleDestroyed && updater.particleDestroyed(this, override);\n        }\n        pathGenerator && pathGenerator.reset(this);\n        this._engine.dispatchEvent(\"particleDestroyed\", {\n            container: this.container,\n            data: {\n                particle: this,\n            },\n        });\n    }\n    draw(delta) {\n        const container = this.container, canvas = container.canvas;\n        for (const [, plugin] of container.plugins) {\n            canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return this.getRadius() ** 2 * Math.PI * 0.5;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius ?? this.size.value;\n    }\n    getStrokeColor() {\n        return this._getRollColor(this.bubble.color ?? getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.effectClose = true;\n        this.effectFill = true;\n        this.shapeClose = true;\n        this.shapeFill = true;\n        this.pathRotation = false;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), effectType = particlesOptions.effect.type, shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.effect = itemFromSingleOrMultiple(effectType, this.id, reduceDuplicates);\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const effectOptions = particlesOptions.effect, shapeOptions = particlesOptions.shape;\n        if (overrideOptions) {\n            if (overrideOptions.effect && overrideOptions.effect.type) {\n                const overrideEffectType = overrideOptions.effect.type, effect = itemFromSingleOrMultiple(overrideEffectType, this.id, reduceDuplicates);\n                if (effect) {\n                    this.effect = effect;\n                    effectOptions.load(overrideOptions.effect);\n                }\n            }\n            if (overrideOptions.shape && overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n                if (shape) {\n                    this.shape = shape;\n                    shapeOptions.load(overrideOptions.shape);\n                }\n            }\n        }\n        this.effectData = loadEffectData(this.effect, effectOptions, this.id, reduceDuplicates);\n        this.shapeData = loadShapeData(this.shape, shapeOptions, this.id, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        const effectData = this.effectData;\n        if (effectData) {\n            particlesOptions.load(effectData.particles);\n        }\n        const shapeData = this.shapeData;\n        if (shapeData) {\n            particlesOptions.load(shapeData.particles);\n        }\n        const interactivity = new Interactivity(engine, container);\n        interactivity.load(container.actualOptions.interactivity);\n        interactivity.load(particlesOptions.interactivity);\n        this.interactivity = interactivity;\n        this.effectFill = effectData?.fill ?? particlesOptions.effect.fill;\n        this.effectClose = effectData?.close ?? particlesOptions.effect.close;\n        this.shapeFill = shapeData?.fill ?? particlesOptions.shape.fill;\n        this.shapeClose = shapeData?.close ?? particlesOptions.shape.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getRangeValue(pathOptions.delay.value) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        container.retina.initParticle(this);\n        this.size = initParticleNumericAnimationValue(this.options.size, pxRatio);\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this._initPosition(position);\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const particles = container.particles;\n        particles.setLastZIndex(this.position.z);\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let effectDrawer = container.effectDrawers.get(this.effect);\n        if (!effectDrawer) {\n            effectDrawer = this._engine.getEffectDrawer(this.effect);\n            if (effectDrawer) {\n                container.effectDrawers.set(this.effect, effectDrawer);\n            }\n        }\n        if (effectDrawer && effectDrawer.loadEffect) {\n            effectDrawer.loadEffect(this);\n        }\n        let shapeDrawer = container.shapeDrawers.get(this.shape);\n        if (!shapeDrawer) {\n            shapeDrawer = this._engine.getShapeDrawer(this.shape);\n            if (shapeDrawer) {\n                container.shapeDrawers.set(this.shape, shapeDrawer);\n            }\n        }\n        if (shapeDrawer && shapeDrawer.loadShape) {\n            shapeDrawer.loadShape(this);\n        }\n        const sideCountFunc = shapeDrawer?.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of particles.movers) {\n            mover.init && mover.init(this);\n        }\n        if (effectDrawer && effectDrawer.particleInit) {\n            effectDrawer.particleInit(container, this);\n        }\n        if (shapeDrawer && shapeDrawer.particleInit) {\n            shapeDrawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.particleCreated && plugin.particleCreated(this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size, position = this.position;\n        return (position.x >= -radius &&\n            position.y >= -radius &&\n            position.y <= canvasSize.height + radius &&\n            position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        for (const updater of this.container.particles.updaters) {\n            updater.reset && updater.reset(this);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}