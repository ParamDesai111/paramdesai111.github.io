{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont } from \"@tsparticles/engine\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n  constructor() {\n    this._drawLine = (context, line, radius, opacity, index, fill) => {\n      const offsetX = line.length * radius / 2,\n        pos = {\n          x: -offsetX,\n          y: radius / 2\n        },\n        diameter = radius * 2;\n      if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n      } else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n      }\n    };\n  }\n  draw(data) {\n    var _character$style, _character$weight, _character$font;\n    const {\n        context,\n        particle,\n        radius,\n        opacity\n      } = data,\n      character = particle.shapeData;\n    if (!character) {\n      return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n      return;\n    }\n    if (particle.text === undefined) {\n      particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text,\n      style = (_character$style = character.style) !== null && _character$style !== void 0 ? _character$style : \"\",\n      weight = (_character$weight = character.weight) !== null && _character$weight !== void 0 ? _character$weight : \"400\",\n      size = Math.round(radius) * 2,\n      font = (_character$font = character.font) !== null && _character$font !== void 0 ? _character$font : \"Verdana\",\n      fill = particle.shapeFill;\n    const lines = text === null || text === void 0 ? void 0 : text.split(\"\\n\");\n    if (!lines) {\n      return;\n    }\n    context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n      this._drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n  }\n  async init(container) {\n    const options = container.actualOptions;\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t),\n        promises = [];\n      executeOnSingleOrMultiple(shapeOptions, shape => {\n        promises.push(loadFont(shape.font, shape.weight));\n      });\n      await Promise.all(promises);\n    }\n  }\n  particleInit(container, particle) {\n    if (!particle.shape || !validTypes.includes(particle.shape)) {\n      return;\n    }\n    const character = particle.shapeData;\n    if (character === undefined) {\n      return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n      return;\n    }\n    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n  }\n}","map":{"version":3,"names":["executeOnSingleOrMultiple","isInArray","itemFromSingleOrMultiple","loadFont","validTypes","TextDrawer","constructor","_drawLine","context","line","radius","opacity","index","fill","offsetX","length","pos","x","y","diameter","fillText","strokeText","draw","data","_character$style","_character$weight","_character$font","particle","character","shapeData","textData","value","undefined","text","randomIndexData","style","weight","size","Math","round","font","shapeFill","lines","split","concat","globalAlpha","i","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","push","Promise","all","particleInit","includes"],"sources":["C:/Users/84146/OneDrive/Documents/Portfolio/ParamDesai111.github.io/node_modules/@tsparticles/shape-text/browser/TextDrawer.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n    constructor() {\n        this._drawLine = (context, line, radius, opacity, index, fill) => {\n            const offsetX = (line.length * radius) / 2, pos = {\n                x: -offsetX,\n                y: radius / 2,\n            }, diameter = radius * 2;\n            if (fill) {\n                context.fillText(line, pos.x, pos.y + diameter * index);\n            }\n            else {\n                context.strokeText(line, pos.x, pos.y + diameter * index);\n            }\n        };\n    }\n    draw(data) {\n        const { context, particle, radius, opacity } = data, character = particle.shapeData;\n        if (!character) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n        const lines = text?.split(\"\\n\");\n        if (!lines) {\n            return;\n        }\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        context.globalAlpha = opacity;\n        for (let i = 0; i < lines.length; i++) {\n            this._drawLine(context, lines[i], radius, opacity, i, fill);\n        }\n        context.globalAlpha = 1;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}