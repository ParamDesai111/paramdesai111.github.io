{"ast":null,"code":"import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nfunction getItemsFromInitializer(container, map, initializers) {\n  let force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let res = map.get(container);\n  if (!res || force) {\n    res = [...initializers.values()].map(t => t(container));\n    map.set(container, res);\n  }\n  return res;\n}\nasync function getDataFromUrl(data) {\n  const url = itemFromSingleOrMultiple(data.url, data.index);\n  if (!url) {\n    return data.fallback;\n  }\n  const response = await fetch(url);\n  if (response.ok) {\n    return response.json();\n  }\n  getLogger().error(\"\".concat(errorPrefix, \" \").concat(response.status, \" while retrieving config file\"));\n  return data.fallback;\n}\nexport class Engine {\n  constructor() {\n    this._configs = new Map();\n    this._domArray = [];\n    this._eventDispatcher = new EventDispatcher();\n    this._initialized = false;\n    this.plugins = [];\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.effectDrawers = new Map();\n    this.shapeDrawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  get configs() {\n    const res = {};\n    for (const [name, config] of this._configs) {\n      res[name] = config;\n    }\n    return res;\n  }\n  get version() {\n    return \"3.0.3\";\n  }\n  addConfig(config) {\n    var _config$name;\n    const name = (_config$name = config.name) !== null && _config$name !== void 0 ? _config$name : \"default\";\n    this._configs.set(name, config);\n    this._eventDispatcher.dispatchEvent(\"configAdded\", {\n      data: {\n        name,\n        config\n      }\n    });\n  }\n  async addEffect(effect, drawer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    executeOnSingleOrMultiple(effect, type => {\n      !this.getEffectDrawer(type) && this.effectDrawers.set(type, drawer);\n    });\n    await this.refresh(refresh);\n  }\n  addEventListener(type, listener) {\n    this._eventDispatcher.addEventListener(type, listener);\n  }\n  async addInteractor(name, interactorInitializer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._initializers.interactors.set(name, interactorInitializer);\n    await this.refresh(refresh);\n  }\n  async addMover(name, moverInitializer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._initializers.movers.set(name, moverInitializer);\n    await this.refresh(refresh);\n  }\n  async addParticleUpdater(name, updaterInitializer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._initializers.updaters.set(name, updaterInitializer);\n    await this.refresh(refresh);\n  }\n  async addPathGenerator(name, generator) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    !this.getPathGenerator(name) && this.pathGenerators.set(name, generator);\n    await this.refresh(refresh);\n  }\n  async addPlugin(plugin) {\n    let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n    await this.refresh(refresh);\n  }\n  async addPreset(preset, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let refresh = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    (override || !this.getPreset(preset)) && this.presets.set(preset, options);\n    await this.refresh(refresh);\n  }\n  async addShape(shape, drawer) {\n    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    executeOnSingleOrMultiple(shape, type => {\n      !this.getShapeDrawer(type) && this.shapeDrawers.set(type, drawer);\n    });\n    await this.refresh(refresh);\n  }\n  clearPlugins(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  dispatchEvent(type, args) {\n    this._eventDispatcher.dispatchEvent(type, args);\n  }\n  dom() {\n    return this._domArray;\n  }\n  domItem(index) {\n    const dom = this.dom(),\n      item = dom[index];\n    if (!item || item.destroyed) {\n      dom.splice(index, 1);\n      return;\n    }\n    return item;\n  }\n  getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n    }\n    return res;\n  }\n  getEffectDrawer(type) {\n    return this.effectDrawers.get(type);\n  }\n  getInteractors(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n  getMovers(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.shapeDrawers.get(type);\n  }\n  getSupportedEffects() {\n    return this.effectDrawers.keys();\n  }\n  getSupportedShapes() {\n    return this.shapeDrawers.keys();\n  }\n  getUpdaters(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n  init() {\n    if (this._initialized) {\n      return;\n    }\n    this._initialized = true;\n  }\n  async load(params) {\n    var _ref, _params$id, _params$element, _params$element2;\n    const id = (_ref = (_params$id = params.id) !== null && _params$id !== void 0 ? _params$id : (_params$element = params.element) === null || _params$element === void 0 ? void 0 : _params$element.id) !== null && _ref !== void 0 ? _ref : \"tsparticles\".concat(Math.floor(getRandom() * 10000)),\n      {\n        index,\n        url\n      } = params,\n      options = url ? await getDataFromUrl({\n        fallback: params.options,\n        url,\n        index\n      }) : params.options;\n    let domContainer = (_params$element2 = params.element) !== null && _params$element2 !== void 0 ? _params$element2 : document.getElementById(id);\n    if (!domContainer) {\n      domContainer = document.createElement(\"div\");\n      domContainer.id = id;\n      document.body.append(domContainer);\n    }\n    const currentOptions = itemFromSingleOrMultiple(options, index),\n      dom = this.dom(),\n      oldIndex = dom.findIndex(v => v.id.description === id);\n    if (oldIndex >= 0) {\n      const old = this.domItem(oldIndex);\n      if (old && !old.destroyed) {\n        old.destroy();\n        dom.splice(oldIndex, 1);\n      }\n    }\n    let canvasEl;\n    if (domContainer.tagName.toLowerCase() === \"canvas\") {\n      canvasEl = domContainer;\n      canvasEl.dataset[generatedAttribute] = \"false\";\n    } else {\n      const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n      if (existingCanvases.length) {\n        canvasEl = existingCanvases[0];\n        canvasEl.dataset[generatedAttribute] = \"false\";\n      } else {\n        canvasEl = document.createElement(\"canvas\");\n        canvasEl.dataset[generatedAttribute] = \"true\";\n        domContainer.appendChild(canvasEl);\n      }\n    }\n    if (!canvasEl.style.width) {\n      canvasEl.style.width = \"100%\";\n    }\n    if (!canvasEl.style.height) {\n      canvasEl.style.height = \"100%\";\n    }\n    const newItem = new Container(this, id, currentOptions);\n    if (oldIndex >= 0) {\n      dom.splice(oldIndex, 0, newItem);\n    } else {\n      dom.push(newItem);\n    }\n    newItem.canvas.loadCanvas(canvasEl);\n    await newItem.start();\n    return newItem;\n  }\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  loadParticlesOptions(container, options) {\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    for (var _len = arguments.length, sourceOptions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      sourceOptions[_key - 2] = arguments[_key];\n    }\n    for (const updater of updaters) {\n      updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n    }\n  }\n  async refresh() {\n    let refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!refresh) {\n      return;\n    }\n    this.dom().forEach(t => t.refresh());\n  }\n  removeEventListener(type, listener) {\n    this._eventDispatcher.removeEventListener(type, listener);\n  }\n  setOnClickHandler(callback) {\n    const dom = this.dom();\n    if (!dom.length) {\n      throw new Error(\"\".concat(errorPrefix, \" can only set click handlers after calling tsParticles.load()\"));\n    }\n    for (const domItem of dom) {\n      domItem.addClickHandler(callback);\n    }\n  }\n}","map":{"version":3,"names":["errorPrefix","generatedAttribute","executeOnSingleOrMultiple","getLogger","itemFromSingleOrMultiple","Container","EventDispatcher","getRandom","getItemsFromInitializer","container","map","initializers","force","arguments","length","undefined","res","get","values","t","set","getDataFromUrl","data","url","index","fallback","response","fetch","ok","json","error","concat","status","Engine","constructor","_configs","Map","_domArray","_eventDispatcher","_initialized","plugins","_initializers","interactors","movers","updaters","presets","effectDrawers","shapeDrawers","pathGenerators","configs","name","config","version","addConfig","_config$name","dispatchEvent","addEffect","effect","drawer","refresh","type","getEffectDrawer","addEventListener","listener","addInteractor","interactorInitializer","addMover","moverInitializer","addParticleUpdater","updaterInitializer","addPathGenerator","generator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","preset","options","override","getPreset","addShape","shape","getShapeDrawer","clearPlugins","delete","args","dom","domItem","item","destroyed","splice","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","getSupportedEffects","keys","getSupportedShapes","getUpdaters","init","load","params","_ref","_params$id","_params$element","_params$element2","element","Math","floor","domContainer","document","getElementById","createElement","body","append","currentOptions","oldIndex","findIndex","v","description","old","destroy","canvasEl","tagName","toLowerCase","dataset","existingCanvases","getElementsByTagName","appendChild","style","width","height","newItem","canvas","loadCanvas","start","loadOptions","sourceOptions","loadParticlesOptions","_len","Array","_key","updater","forEach","removeEventListener","setOnClickHandler","callback","Error","addClickHandler"],"sources":["C:/Users/84146/OneDrive/Documents/Portfolio/ParamDesai111.github.io/node_modules/@tsparticles/engine/browser/Core/Engine.js"],"sourcesContent":["import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return response.json();\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get version() {\n        return \"3.0.3\";\n    }\n    addConfig(config) {\n        const name = config.name ?? \"default\";\n        this._configs.set(name, config);\n        this._eventDispatcher.dispatchEvent(\"configAdded\", { data: { name, config } });\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        executeOnSingleOrMultiple(effect, (type) => {\n            !this.getEffectDrawer(type) && this.effectDrawers.set(type, drawer);\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        !this.getPathGenerator(name) && this.pathGenerators.set(name, generator);\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        (override || !this.getPreset(preset)) && this.presets.set(preset, options);\n        await this.refresh(refresh);\n    }\n    async addShape(shape, drawer, refresh = true) {\n        executeOnSingleOrMultiple(shape, (type) => {\n            !this.getShapeDrawer(type) && this.shapeDrawers.set(type, drawer);\n        });\n        await this.refresh(refresh);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this._domArray;\n    }\n    domItem(index) {\n        const dom = this.dom(), item = dom[index];\n        if (!item || item.destroyed) {\n            dom.splice(index, 1);\n            return;\n        }\n        return item;\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    async load(params) {\n        const id = params.id ?? params.element?.id ?? `tsparticles${Math.floor(getRandom() * 10000)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        let domContainer = params.element ?? document.getElementById(id);\n        if (!domContainer) {\n            domContainer = document.createElement(\"div\");\n            domContainer.id = id;\n            document.body.append(domContainer);\n        }\n        const currentOptions = itemFromSingleOrMultiple(options, index), dom = this.dom(), oldIndex = dom.findIndex((v) => v.id.description === id);\n        if (oldIndex >= 0) {\n            const old = this.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                dom.splice(oldIndex, 1);\n            }\n        }\n        let canvasEl;\n        if (domContainer.tagName.toLowerCase() === \"canvas\") {\n            canvasEl = domContainer;\n            canvasEl.dataset[generatedAttribute] = \"false\";\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n            if (existingCanvases.length) {\n                canvasEl = existingCanvases[0];\n                canvasEl.dataset[generatedAttribute] = \"false\";\n            }\n            else {\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.dataset[generatedAttribute] = \"true\";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        if (!canvasEl.style.width) {\n            canvasEl.style.width = \"100%\";\n        }\n        if (!canvasEl.style.height) {\n            canvasEl.style.height = \"100%\";\n        }\n        const newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= 0) {\n            dom.splice(oldIndex, 0, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n        }\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        this.dom().forEach((t) => t.refresh());\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const dom = this.dom();\n        if (!dom.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}